<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StaffManagementPlatfromAPI</name>
    </assembly>
    <members>
        <member name="T:StaffManagementPlatfromAPI.Controllers.DepartmentController">
            <summary>
            Department Controller that hadles all request response cylce for all HTTPS Verb that is use
            </summary>
        </member>
        <member name="M:StaffManagementPlatfromAPI.Controllers.DepartmentController.#ctor(StaffManagementPlatfromAPI.Domain.Repositories.UnitOfWork.IUnitOfWork,AutoMapper.IMapper)">
            <summary>
            The unit of work is use to handle data logic implimentation layer between the entities of the project,
            The mapper is used to map object of entities and object of model to abstract non needed data from user
            </summary>
            <param name="unitOfWork">UnitOfWork</param>
            <param name="mapper"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:StaffManagementPlatfromAPI.Controllers.DepartmentController.GetAllDepartment">
            <summary>
            Get All Departments
            </summary>
            <returns>Return a list of Department</returns>
        </member>
        <member name="M:StaffManagementPlatfromAPI.Controllers.DepartmentController.GetDepartmentById(System.Int32)">
            <summary>
            Get a Department by ID
            </summary>
            <param name="id">The id is the Department to get</param>
            <returns>An ActionResult  of department ID</returns>
            <response code="200">Returns the requested Staff</response>
        </member>
        <member name="M:StaffManagementPlatfromAPI.Controllers.DepartmentController.GetDepartmentDescription(System.Int32)">
            <summary>
            Get department descriptions
            </summary>
            <param name="id">The id of the department to get the description</param>
            <returns>An ActionResult of department Description</returns>
        </member>
        <member name="M:StaffManagementPlatfromAPI.Controllers.DepartmentController.CreateDepartment(StaffManagementPlatfromAPI.Domain.Models.DepartmentCreateDto)">
            <summary>
            Create or post new Department with name and description
            </summary>
            <param name="departmentCreateDto">The departments name and description to post</param>
            <returns>ActionResult of the Department ot create</returns>
        </member>
        <member name="M:StaffManagementPlatfromAPI.Controllers.DepartmentController.UpdateDepartment(System.Int32,StaffManagementPlatfromAPI.Domain.Models.DepartmentGetDto)">
            <summary>
            Update the Department, name and Description
            </summary>
            <param name="id">Department ID</param>
            <param name="departmentDto">Department to update</param>
            <returns>ACtionResult of the department to update</returns>
        </member>
        <member name="M:StaffManagementPlatfromAPI.Controllers.DepartmentController.UpdateDepartmentDescription(System.Int32,StaffManagementPlatfromAPI.Domain.Models.DepartmentDescriptionUpdateDto)">
            <summary>
            Update the entire description content of the department Id
            </summary>
            <param name="id">Department ID</param>
            <param name="descriptionDto">new Description update to</param>
            <returns>An ActionResult of the Description</returns>
        </member>
        <member name="M:StaffManagementPlatfromAPI.Controllers.DepartmentController.PartialUpdateDescription(System.Int32,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{StaffManagementPlatfromAPI.Domain.Entities.Department},System.String)">
            <summary>
             Update the Existing department description by the id
            </summary>
            <param name="id"></param>
            <param name="patchDescription"> Description to add</param>
            <param name="description">Existing Description</param>
            <returns> An ActionResult of the update description</returns>
        </member>
        <member name="M:StaffManagementPlatfromAPI.Controllers.DepartmentController.DeleteDepartment(System.Int32)">
            <summary>
            Delete a department with ID
            </summary>
            <param name="id">Department ID to delete</param>
            <returns>ActionResult of the department to delete</returns>
        </member>
        <member name="M:StaffManagementPlatfromAPI.Controllers.DepartmentController.GetStaffInDepartment(System.Int32)">
            <summary>
            Get list of staff from a department using department Id
            </summary>
            <param name="id">Department id</param>
            <returns>An ActionResult StaffDto, to retrieve list of staff from department</returns>
        </member>
        <member name="M:StaffManagementPlatfromAPI.Controllers.DepartmentController.CreateDepartmentWithStaff(System.Int32,StaffManagementPlatfromAPI.Domain.Models.StaffForCreationDto)">
            <summary>
            Create a new Staff with the existing department id
            </summary>
            <param name="departmentId"> Enter department id</param>
            <param name="staffForCreationDto">Staff data source to create new staff</param>
            <returns>An ActionResult of new created Staff of deaprtment id</returns>
        </member>
        <member name="T:StaffManagementPlatfromAPI.Controllers.StaffController">
            <summary>
            
            </summary>
        </member>
        <member name="M:StaffManagementPlatfromAPI.Controllers.StaffController.#ctor(StaffManagementPlatfromAPI.Domain.Repositories.UnitOfWork.IUnitOfWork,AutoMapper.IMapper)">
            <summary>
            The unit of work is use to handle data logic implimentation layer between the entities of the project,
            The mapper is used to map object of entities and object of model to abstract non needed data from user
            </summary>
            <param name="unitOfWork"></param>
            <param name="mapper"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:StaffManagementPlatfromAPI.Controllers.StaffController.GetStaffs">
            <summary>
            Get a list of Staff
            </summary>
            <returns>ActionResult of the list of staff</returns>
        </member>
        <member name="M:StaffManagementPlatfromAPI.Controllers.StaffController.GetStaffById(System.Int32)">
            <summary>
            Get a Staff by id
            </summary>
            <param name="id">The id is the staff to get</param>
            <returns>An ActionResult of {StaffFullDto} </returns>
            <response code="200">Returns the requested Staff</response>
        </member>
        <member name="M:StaffManagementPlatfromAPI.Controllers.StaffController.GetStaffFullNamesByNames(System.Int32)">
            <summary>
             get a staff fullname by id
            </summary>
            <param name="id">The id of the staff fullname you want to get</param>
            <returns>Returns the requested Staff fullname by id</returns>
        </member>
        <member name="M:StaffManagementPlatfromAPI.Controllers.StaffController.GetWithFullName(System.String)">
            <summary>
             Get Fullname of a staff
            </summary>
            <param name="fullNames">The fullname of the staff you want to get</param>
            <returns>Returns the requested staff fullname by names</returns>
        </member>
        <member name="M:StaffManagementPlatfromAPI.Controllers.StaffController.GetStaffPartialDetails(System.Int32)">
            <summary>
            Get staff by id 
            </summary>
            <param name="id">The id of the staff you want to get</param>
            <returns>Returns the staff details by ID</returns>
        </member>
        <member name="M:StaffManagementPlatfromAPI.Controllers.StaffController.CreateNewStaff(StaffManagementPlatfromAPI.Domain.Models.StaffForCreationDto)">
            <summary>
            Create or post a new staff to database
            </summary>
            <param name="staffCreationDto">Enter basic details of the staff to create </param>
            <returns>Return a succesfull or OK after create or post method is done</returns>
            
        </member>
        <member name="M:StaffManagementPlatfromAPI.Controllers.StaffController.DeleteStaff(System.Int32)">
            <summary>
             Delete a staff provided the ID is entered
            </summary>
            <param name="id">The ID of the staff you want to delete</param>
            <returns>Return no content after a successfull request response cylce is done</returns>
        </member>
        <member name="T:StaffManagementPlatfromAPI.Domain.Models.StaffFullDto">
            <summary>
            A DTO for staff 
            </summary>
        </member>
        <member name="P:StaffManagementPlatfromAPI.Domain.Models.StaffFullDto.DepartmentName">
            <summary>
            
            </summary>
        </member>
        <member name="T:StaffManagementPlatfromAPI.Domain.Models.StaffGetDto">
            <summary>
             The staff data to return back to the user
            </summary>
        </member>
        <member name="T:StaffManagementPlatfromAPI.Domain.Repositories.UnitOfWork.IUnitOfWork">
            <summary>
            
            </summary>
        </member>
        <member name="T:StaffManagementPlatfromAPI.Profiles.StaffProfile">
            <summary>
            Mapping profile class for Staff
            </summary>
        </member>
        <member name="M:StaffManagementPlatfromAPI.Profiles.StaffProfile.#ctor">
            <summary>
            Mapping profile between Staff entities and other variance of Staff models
            </summary>
        </member>
    </members>
</doc>
